package org.geonetwork.services.ebrim.csw202;

import java.util.ArrayList;
import java.util.List;

import org.geonetwork.dao.facade.RegistryObjectListStoreFacade;
import org.geonetwork.domain.csw202.discovery.*;
import org.geonetwork.domain.ebrim.informationmodel.classification.ClassificationNode;
import org.geonetwork.domain.ebrim.informationmodel.core.ExtrinsicObject;
import org.geonetwork.domain.ebrim.informationmodel.core.RegistryObjectList;
import org.geonetwork.domain.ows100.getcapabilities.Sections;
import org.geonetwork.domain.ows100.getcapabilities.AcceptFormats;
import org.geonetwork.domain.ows100.common.MimeType;
import org.geonetwork.services.ebrim.AbstractServicesTest;
import org.geonetwork.utils.RandomPopulator;

/**
 * 
 * @author Erik van Ingen
 * 
 */

public class CSW202ServiceImplTest extends AbstractServicesTest {

	CSW202Service csw202Service;
	RegistryObjectListStoreFacade registryObjectListStoreFacade;

	@Override
	protected void onSetUp() throws Exception {
		super.onSetUp();
		assertNotNull(csw202Service);
	}

	public void testGetCapabilities1() throws Exception {
		GetCapabilities request = (GetCapabilities) RandomPopulator.instantiate(GetCapabilities.class, null);

        request.setService(CSW202Constants.CSW_EBRIM);

        AcceptFormats acceptFormats = new AcceptFormats();
        List<MimeType> mtList = new ArrayList<MimeType>();
        MimeType mt = new MimeType();
        mt.setValue(CSW202Constants.outputFormatapplicationXml);
        mtList.add(mt);
        acceptFormats.setOutputFormat(mtList);
        request.setAcceptFormats(acceptFormats);

        request.setSections( new Sections());

		request.getAcceptVersions().getVersion().add(0, CSW202Constants.VERSION);
		Capabilities response = csw202Service.getCapabilities(request);

		assertEquals(CSW202Constants.VERSION, response.getVersion());
	}

	/**
	 * The value of the service parameter must be “CSW”. The request / response sequence of a "handshake" between a CSW
	 * AP ISO client and a CSW server and a following operation call (getRecords) is as follows (see also figure 9): the
	 * client first asks the CSW server for the capabilities (with service = "CSW"). In the capabilities document the
	 * serviceType must be set to "CSW”.
	 * 
	 * @throws Exception
	 */

	public void testGetCapabilities2() throws Exception {
		GetCapabilities request = (GetCapabilities) RandomPopulator.instantiate(GetCapabilities.class, null);
	
		request.setService(CSW202Constants.CSW_EBRIM);

        Sections sections = new Sections();
        List<String> section = new ArrayList<String>();

        AcceptFormats acceptFormats = new AcceptFormats();
        List<MimeType> mtList = new ArrayList<MimeType>();
        MimeType mt = new MimeType();
        mt.setValue(CSW202Constants.outputFormatapplicationXml);
        mtList.add(mt);
        acceptFormats.setOutputFormat(mtList);
        request.setAcceptFormats(acceptFormats);

        section.add(CapabilitiesSection.ServiceProvider.name());
        section.add(CapabilitiesSection.ServiceIdentification.name());
        sections.setSection(section);
        
		request.setSections(sections);
		request.getAcceptVersions().getVersion().add(0, CSW202Constants.VERSION);

		Capabilities response = csw202Service.getCapabilities(request);
		assertEquals(CSW202Constants.CSW_EBRIM_SERVICE_TYPE, response.getServiceIdentification().getServiceType());

	}

	public void _testGetDomain() {
		// TODO "Not yet implemented
	}

	/**
	 * Basic test
	 * 
	 * 
	 */
	public void _testGetRecordById1() throws CSW202ServiceException {
		GetRecordById request = new GetRecordById();
		List<String> ids = new ArrayList<String>();
		ids.add("How unique can I be?");
		request.setId(ids);
		request.setOutputFormat(CSW202Constants.outputFormatapplicationXml);
		request.setOutputSchema(CSW202Constants.outputSchema);
		request.setElementSetName(new ElementSetName());
		request.getElementSetName().setElementSet(ElementSet.brief);
		GetRecordByIdResponse response = csw202Service.getRecordById(request);
		assertNotNull(response);
	}

	/**
	 * Filling DB with 2 ebrim documents, ClassificationNode and ExtrinsicObject Searching for one and the other
	 * subsequently.
	 * 
	 * Test obects generated by the RandomPopulator
	 */
	public void _testGetRecordById2() throws Exception {
		GetRecordByIdResponse response;

		GetRecordById request = new GetRecordById();
		List<String> ids = new ArrayList<String>();
		request.setId(ids);
		request.getId().add(" non existing id ");
		request.setOutputFormat(CSW202Constants.outputFormatapplicationXml);
		request.setOutputSchema(CSW202Constants.outputSchema);
		request.setElementSetName(new ElementSetName());
		request.getElementSetName().setElementSet(ElementSet.brief);
		response = csw202Service.getRecordById(request);
		assertNull(response.getOtherRecords());

		ClassificationNode classificationNode = (ClassificationNode) RandomPopulator.instantiate(
				ClassificationNode.class, null);
		ExtrinsicObject extrinsicObject = (ExtrinsicObject) RandomPopulator.instantiate(ExtrinsicObject.class, null);

		RegistryObjectList registryObjectList = new RegistryObjectList();
		registryObjectList.setIso19139Id("Iso19139Id");
		registryObjectList.add(classificationNode);
		registryObjectList.add(extrinsicObject);
		registryObjectListStoreFacade.save(registryObjectList);

		String classificationNodeId = classificationNode.getId().getValue();
		String extrinsicObjectId = extrinsicObject.getId().getValue();
		request.getId().add(classificationNodeId);
		request.getId().add(extrinsicObjectId);
		// TODO investigate this.
		response = csw202Service.getRecordById(request);
		assertEquals(2, response.getAbstractRecords().size());

	}

	public void _testGetRecords() throws Exception {
		GetRecordsResponse response;
		GetRecords request = (GetRecords) RandomPopulator.instantiate(GetRecords.class, null);
		request.setOutputFormat(CSW202Constants.outputFormatapplicationXml);
		request.setOutputSchema(CSW202Constants.outputSchema);

		Query cswQuery = (Query) RandomPopulator.instantiate(Query.class, null);
		request.setQuery(cswQuery);
		request.setAdhocQuery(null);
		request.setStoredQuery(null);

		// TODO review this test and implementation
		// response = csw202Service.getRecords(request);
		// assertEquals(0, response.getSearchResults().getNumberOfRecordsReturned().intValue());
		//
		// ClassificationNode classificationNode = (ClassificationNode) RandomPopulator.instantiate(
		// ClassificationNode.class, null);
		// ExtrinsicObject extrinsicObject = (ExtrinsicObject) RandomPopulator.instantiate(ExtrinsicObject.class, null);
		//
		// RegistryObjectList registryObjectList = new RegistryObjectList();
		// registryObjectList.setIso19139Id("Iso19139Id");
		// registryObjectList.add(classificationNode);
		// registryObjectList.add(extrinsicObject);
		// registryObjectListStoreFacade.save(registryObjectList);
		//
		// assertEquals(2, response.getSearchResults().getNumberOfRecordsReturned().intValue());
	}

	/**
	 * general simple test
	 * 
	 * Tests on validation of the request are done in DescribeRecordValidationTest
	 * 
	 * 
	 */
	public void _testDescribeRecord1() throws Exception {
		// very general test
		DescribeRecord request = (DescribeRecord) RandomPopulator.instantiate(DescribeRecord.class);
		request.setService(RequestBase.SERVICE);
		request.setVersion(RequestBase.VERSION);
		request.setOutputFormat(CSW202Constants.outputFormatapplicationXml);
		request.setSchemaLanguage(CSW202Constants.SCHEMA_LANGUAGE_1);
		DescribeRecordResponse response = csw202Service.describeRecord(request);
		assertNotNull(response);
	}

	public void _testGetRepositoryItem() {
		// TODO "Not yet implemented
	}

	public void _testHarvest() {
		// TODO "Not yet implemented
	}

	public void _testTransaction() {
		// TODO "Not yet implemented
	}

	public void setCsw202Service(CSW202Service csw202Service) {
		this.csw202Service = csw202Service;
	}

	public void setRegistryObjectStoreFacade(RegistryObjectListStoreFacade registryObjectListStoreFacade) {
		this.registryObjectListStoreFacade = registryObjectListStoreFacade;
	}
}
